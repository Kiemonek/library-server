// <auto-generated />
using System;
using Library_WebServer.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Library_WebServer.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Library_WebServer.Models.LibraryAuthor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors", (string)null);
                });

            modelBuilder.Entity("Library_WebServer.Models.LibraryComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("Library_WebServer.Models.LibraryObjectGenre", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 1,
                            Name = "ScienceFiction"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cooking"
                        });
                });

            modelBuilder.Entity("Library_WebServer.Models.LibraryObjectStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Available"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Reserved"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Unavailable"
                        });
                });

            modelBuilder.Entity("Library_WebServer.Models.LibraryObjectType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("PublicationTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Book"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Magazine"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Newspaper"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ScientificPaper"
                        });
                });

            modelBuilder.Entity("Library_WebServer.Models.LibraryPublication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("LibraryObjectGenre.Id")
                        .HasColumnType("integer");

                    b.Property<int>("LibraryObjectType.Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LibraryObjectGenre.Id");

                    b.HasIndex("LibraryObjectType.Id");

                    b.ToTable("Publications", (string)null);
                });

            modelBuilder.Entity("Library_WebServer.Models.LibraryReservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LibraryPublication")
                        .HasColumnType("uuid");

                    b.Property<Guid>("User")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reservations", (string)null);
                });

            modelBuilder.Entity("Library_WebServer.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserAccountType.Id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountType.Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Library_WebServer.Models.UserAccountType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "User"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Librarian"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Library_WebServer.Models.LibraryPublication", b =>
                {
                    b.HasOne("Library_WebServer.Models.LibraryObjectGenre", "LibraryObjectGenre")
                        .WithMany()
                        .HasForeignKey("LibraryObjectGenre.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library_WebServer.Models.LibraryObjectType", "LibraryObjectType")
                        .WithMany()
                        .HasForeignKey("LibraryObjectType.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryObjectGenre");

                    b.Navigation("LibraryObjectType");
                });

            modelBuilder.Entity("Library_WebServer.Models.User", b =>
                {
                    b.HasOne("Library_WebServer.Models.UserAccountType", "UserAccountType")
                        .WithMany()
                        .HasForeignKey("UserAccountType.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccountType");
                });
#pragma warning restore 612, 618
        }
    }
}
